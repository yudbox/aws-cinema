# https://circleci.com/docs/2.0/orb-intro/
# https://circleci.com/developer/orbs/orb/circleci/slack
# https://github.com/CircleCI-Public/slack-orb/wiki/Setup
orbs:
  slack: circleci/slack@4.9.5

version: 2.1

# executors это образы с докерхаба которые можно переиспользовать
# -
# -
# -
# -
# -
executors:
  #  имя экзекъютера
  node-executor:
    docker:
      # https://circleci.com/developer/images/image/cimg/node
      # это специальный образ с DockerHub для circleci
      - image: cimg/node:16.15.0
      # указываю корневую папку где проект circleci будет развернут /home/circleci/repo/
    working_directory: ~/repo

  slack-executor:
    docker:
      - image: cibuilds/base:latest
    resource_class: small

  terraform-executor:
    # https://hub.docker.com/r/hashicorp/terraform/tags
    docker:
      - image: hashicorp/terraform:1.2.0

# aliases это участки кода которые можно положить в переменную
# -
# -
# -
# -
# -
aliases:
  - &show-current-branch-name # CIRCLE_BRANCH это встроенная переменная circleci
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    # restore_cache позволяет переиспользовать кеш app-{{ checksum "package.json" }}
    # 1. проверяем есть ли какие-то данные в app-{{ checksum "package.json" }}, если точного совпадения нет то
    # 2. применяется любой кеш которовый начинается с имени app-и-любое-имя-дальше
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &save-cache
    # myapp-{{ checksum "filename" }} это специальная кодировка которая позволяет найти файл или папку относительно корневой директории
    # кеш будет регенерироваться каждый раз, когда что-то изменяется в файле package.json, но для всех веток будет одинаков
    # если написать имя myapp-{{ .Branch }}-{{ checksum "package-lock.json" }}
    # кеш будет регенерироваться каждый раз, когда что-то изменяется в файле package.json и когда изменится ветка при деплои
    #  save_cache сохраняет папку node_modules целиком со всеми зависимостями в кеш в переменную app-{{ checksum "package.json" }}
    #  если далее будут другие save_cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-dependencies
    run:
      name: Insatll dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &install-aws-cli # запускаем команду установки awscli а затем python3-pip python-dev-is-python3 build-essential в корневую дерикторию "/"
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev-is-python3 build-essential
  - &build-react-project
    #  здесь создается папка build с помощью команды npm run build и эта папака архивируется в zip архив
    #  для загрузки ее на AWS сервис S3 bucket
    run:
      name: Build projects
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "ls -la"
        ls -la
        echo "Build succesful "

jobs:
  build:
    #  использование экзекъютера
    executor: node-executor
    steps:
      - checkout
      - *show-current-branch-name # вызов алиаса по имени
      - *restore-cache # вызов алиаса по имени
      - *install-dependencies # вызов алиаса по имени
      - *save-cache # вызов алиаса по имени
      - run:
          name: Copy Infrastructure Folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  linting:
    #  использование экзекъютера
    executor: node-executor
    steps:
      - checkout
      - *show-current-branch-name # вызов алиаса по имени
      - *restore-cache # ниже не нужно созранять node_modules в кеш т.к. это сделано в джобсе build
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    #  использование экзекъютера
    executor: node-executor
    steps:
      - checkout
      - *show-current-branch-name # вызов алиаса по имени
      - *restore-cache # ниже не нужно созранять node_modules в кеш т.к. это сделано в джобсе build
      - run:
          name: Run prettier check
          command: npm run prettier:check

  terraform-validate:
    #  использование экзекъютера
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name # вызов алиаса по имени
      - run:
          name: Terraform validate & format
          command: |
            cd infrastructure/
            terraform init
            terraform fmt
            terraform validate

  terraform-plan-and-apply:
    #  использование экзекъютера
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
      - *show-current-branch-name # вызов алиаса по имени
      - run:
          name: Teterraform-plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Show the directories
          command: |
            cd 
            ls -la
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output cinema_app_bucket_name > ../cinema_app_bucket_name.txt

        # terraform output cloudfront_distribution_yudbox_id > ../cloudfront_distribution_yudbox_id.txt

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            - artifacts

  deploy-to-aws-s3:
    #  использование экзекъютера
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name # вызов алиаса по имени
      - *install-aws-cli # вызов алиаса по имени
      - *build-react-project # вызов алиаса по имени
      - run:
          # в зависимости от имени ветки запускаем команду для деплоя сбилженого проекта на AWS сервис S3 bucket
          name: Deploy to AWS S3
          command: |
            echo "start deploing ----->"
            echo "CIRCLE_BRANCH  === ${CIRCLE_BRANCH}"
            AWS_BUCKET_NAME=$(cat artifacts/cinema_app_bucket_name.txt | sed 's/\"//g')
            echo "BUCKET_NAME----> = ${AWS_BUCKET_NAME}"
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    #  использование экзекъютера
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name # вызов алиаса по имени
      - *install-aws-cli # вызов алиаса по имени
      - *build-react-project # вызов алиаса по имени
      - run:
          # в зависимости от имени ветки запускаем команду для перезапуска кеширования на облаке
          # cloudfront это сервис который позволяет кешировать сайты или чаще всего статические картинки которые редко меняются для первой загрузки с сервера
          # это нужно для того чтоб в удаленных уголках мира загрузка сайта происходила быстрее, если у нас сервер находится во Франкфурте а пользовотель
          # заходит на сайт где-то в индонезии то AWS кеширует наш сайт или статику в разных уголках мира (где есть Edge Location) и загрузка происходит быстрее
          # СDN (Cloud Delivery Network) это сеть Edge Location которые хранят кеш сайтов
          # в AWS кеш по умолчанию хранится 24 часа в данной команде мы сбрасываем кеш (создаем инвалидацию) create-invalidation котороая обновит кеш загруженный в S3 bucket
          name: Deploy to AWS Cloudfront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_yudbox_id.txt | sed 's/\"//g')
            echo "BUCKET_NAME----> = ${AWS_BUCKET_NAME}"
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            fi

  # https://circleci.com/developer/orbs/orb/circleci/slack
  notify-via-slack:
    #  использование экзекъютера
    executor: slack-executor
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: "always"
          channel: "cinema-circleci-slack-app" # имя созданного канала в самом slack для моего проекта
          # template: success_tagged_deploy_1 #https://github.com/CircleCI-Public/slack-orb
          template: ""
          # https://api.slack.com/block-kit/interactivity // примеры кастомных сообщений
          # https://emojipedia.org/ здесь можно взять имоджи для сообщения
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} deployment to AWS S3 and Cloudfront completed. 👍",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n${CIRCLE_BUILD_NUM}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n${CIRCLE_PROJECT_USERNAME}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  terraform-destroy:
    #  использование экзекъютера
    executor: slack-executor
    steps:
      - checkout
      - *show-current-branch-name # вызов алиаса по имени
      - run:
          # в зависимости от имени ветки запускаем команду для деплоя сбилженого проекта на AWS сервис S3 bucket
          name: Terraform destroy
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH} 
            terraform destroy --auto-approve

  # workflows указывает порядок работы наших jobs описаных выше
  # срабатывают все сразу если не указать зависимости requires
  # начнется с build -> deploy-to-aws-s3 -> deploy-to-aws-cloudfront
  # filters указывают при каких событиях jobs должны запускаться
  # В моем случае - только на событиях в ветках master, staging nad develop
workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      # - deploy-to-aws-cloudfront:
      #     requires:
      #       - deploy-to-aws-s3
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      # - hold:
      #     type: approval
      #     requires:
      #       - deploy-to-aws-s3
      # - terraform-destroy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
